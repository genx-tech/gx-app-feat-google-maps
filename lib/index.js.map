{"version":3,"sources":["../src/index.js"],"names":["Enums","Feature","Helpers","tryRequire","require","InvalidConfiguration","module","exports","type","SERVICE","groupable","load_","app","options","name","clientOptions","apiKey","Client","Status","client","handleResult","r","data","status","OK","level","ZERO_RESULTS","log","error_message","service","geocode_","address","extra","geocode","params","key","placesNearby_","placesNearby","placeAutocomplete_","placeAutocomplete","registerService"],"mappings":";;;;AAAA,MAAM;AACFA,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GADL;AAEFC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAFP,IAGFC,OAAO,CAAC,WAAD,CAHX;;AAIA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AAKbC,EAAAA,IAAI,EAAEP,OAAO,CAACQ,OALD;AAWXC,EAAAA,SAAS,EAAE,IAXA;AAqBbC,EAAAA,KAAK,EAAE,gBAAgBC,GAAhB,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AACvC,UAAM;AAAEC,MAAAA,aAAa,GAAG,EAAlB;AAAsBC,MAAAA;AAAtB,QAAiCH,OAAvC;AACA,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqBf,UAAU,CAAC,qCAAD,CAArC;AAEA,UAAMgB,MAAM,GAAG,IAAIF,MAAJ,CAAWF,aAAX,CAAf;;AACA,UAAMK,YAAY,GAAIC,CAAD,IAAO;AACxB,UAAIA,CAAC,CAACC,IAAF,CAAOC,MAAP,KAAkBL,MAAM,CAACM,EAA7B,EAAiC;AAC7B,YAAIC,KAAK,GAAGJ,CAAC,CAACC,IAAF,CAAOC,MAAP,KAAkBL,MAAM,CAACQ,YAAzB,GAAwC,MAAxC,GAAiD,OAA7D;AACAd,QAAAA,GAAG,CAACe,GAAJ,CAAQF,KAAR,EAAgB,IAAGJ,CAAC,CAACC,IAAF,CAAOC,MAAO,IAAGF,CAAC,CAACC,IAAF,CAAOM,aAAc,EAAzD,EAA4D;AAAEN,UAAAA,IAAI,EAAED,CAAC,CAACC;AAAV,SAA5D;AACH;;AAED,aAAOD,CAAC,CAACC,IAAT;AACH,KAPD;;AASA,UAAMO,OAAO,GAAG;AACZC,MAAAA,QAAQ,EAAE,OAAOC,OAAP,EAAgBC,KAAhB,KACNZ,YAAY,CAAC,MAAMD,MAAM,CAACc,OAAP,CAAe;AAAEC,QAAAA,MAAM,EAAE;AAAEH,UAAAA,OAAF;AAAW,aAAGC,KAAd;AAAqBG,UAAAA,GAAG,EAAEnB;AAA1B;AAAV,OAAf,CAAP,CAFJ;AAGZoB,MAAAA,aAAa,EAAE,MAAOF,MAAP,IACXd,YAAY,CAAC,MAAMD,MAAM,CAACkB,YAAP,CAAoB;AAAEH,QAAAA,MAAM,EAAE,EAAE,GAAGA,MAAL;AAAaC,UAAAA,GAAG,EAAEnB;AAAlB;AAAV,OAApB,CAAP,CAJJ;AAKZsB,MAAAA,kBAAkB,EAAE,MAAOJ,MAAP,IAChBd,YAAY,CAAC,MAAMD,MAAM,CAACoB,iBAAP,CAAyB;AAAEL,QAAAA,MAAM,EAAE,EAAE,GAAGA,MAAL;AAAaC,UAAAA,GAAG,EAAEnB;AAAlB;AAAV,OAAzB,CAAP;AANJ,KAAhB;AASAJ,IAAAA,GAAG,CAAC4B,eAAJ,CAAoB,WAApB,EAAiCX,OAAjC;AACH;AA7CY,CAAjB","sourcesContent":["const {\n    Enums: { Feature },\n    Helpers: { tryRequire },\n} = require(\"@genx/app\");\nconst { InvalidConfiguration } = require(\"@genx/error\");\n\nmodule.exports = {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.SERVICE,\n\n     /**\n     * This feature can be grouped by serviceGroup\n     * @member {boolean}\n     */\n      groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} options - Options for the feature, from app config\n     * @property {object} options.clientOptions - The client options.\n     * @param {string} name - Service name assigned by the service container     \n     * @returns {Promise.<*>}\n     */\n    load_: async function (app, options, name) {\n        const { clientOptions = {}, apiKey } = options;\n        const { Client, Status } = tryRequire(\"@googlemaps/google-maps-services-js\");\n\n        const client = new Client(clientOptions);\n        const handleResult = (r) => {\n            if (r.data.status !== Status.OK) {\n                let level = r.data.status === Status.ZERO_RESULTS ? \"warn\" : \"error\";\n                app.log(level, `[${r.data.status}]${r.data.error_message}`, { data: r.data });\n            }\n\n            return r.data;\n        };\n\n        const service = {\n            geocode_: async (address, extra) =>\n                handleResult(await client.geocode({ params: { address, ...extra, key: apiKey } })),\n            placesNearby_: async (params) =>\n                handleResult(await client.placesNearby({ params: { ...params, key: apiKey } })),\n            placeAutocomplete_: async (params) =>\n                handleResult(await client.placeAutocomplete({ params: { ...params, key: apiKey } })),\n        };\n\n        app.registerService(\"googleMap\", service);\n    },\n};\n"],"file":"index.js"}