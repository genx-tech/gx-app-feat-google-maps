{"version":3,"sources":["../src/index.js"],"names":["Feature","Helpers","requireConfig","require","ExternalServiceError","allApiMethods","module","exports","type","SERVICE","groupable","load_","app","options","name","clientOptions","apiKey","apiDefaultArgs","Client","Status","tryRequire","client","apiWrapper","params","r","key","error","message","data","status","OK","level","ZERO_RESULTS","log","error_message","service","reduce","result","method","registerService"],"mappings":";;;;AAAA,MAAM;AACFA,EAAAA,OADE;AAEFC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAFP,IAGFC,OAAO,CAAC,WAAD,CAHX;;AAIA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AAQA,MAAME,aAAa,GAAG,CAClB,mBADkB,EAElB,yBAFkB,EAGlB,YAHkB,EAIlB,gBAJkB,EAKlB,WALkB,EAMlB,mBANkB,EAOlB,SAPkB,EAQlB,WARkB,EASlB,iBATkB,EAUlB,cAVkB,EAWlB,mBAXkB,EAYlB,cAZkB,EAalB,YAbkB,EAclB,wBAdkB,EAelB,cAfkB,EAgBlB,gBAhBkB,EAiBlB,iBAjBkB,EAkBlB,aAlBkB,EAmBlB,YAnBkB,EAoBlB,UApBkB,CAAtB;AAuBAC,MAAM,CAACC,OAAP,GAAiB;AAKbC,EAAAA,IAAI,EAAER,OAAO,CAACS,OALD;AAWbC,EAAAA,SAAS,EAAE,IAXE;AA0BbC,EAAAA,KAAK,EAAE,gBAAgBC,GAAhB,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AACvCZ,IAAAA,aAAa,CAACU,GAAD,EAAMC,OAAN,EAAe,CAAC,QAAD,CAAf,EAA2BC,IAA3B,CAAb;AAEA,UAAM;AAAEC,MAAAA,aAAa,GAAG,EAAlB;AAAsBC,MAAAA,MAAtB;AAA8BC,MAAAA;AAA9B,QAAiDJ,OAAvD;AACA,UAAM;AAAEK,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqBP,GAAG,CAACQ,UAAJ,CACvB,qCADuB,CAA3B;AAIA,UAAMC,MAAM,GAAG,IAAIH,MAAJ,CAAWH,aAAX,CAAf;;AACA,UAAMO,UAAU,GAAIR,IAAD,IAAU,MAAOS,MAAP,IAAkB;AAC3C,UAAIC,CAAJ;;AACA,UAAI;AACAA,QAAAA,CAAC,GAAG,MAAMH,MAAM,CAACP,IAAD,CAAN,CAAa,EACnB,GAAGG,cADgB;AAEnBM,UAAAA,MAAM,EAAE,EAAE,GAAGA,MAAL;AAAaE,YAAAA,GAAG,EAAET;AAAlB;AAFW,SAAb,CAAV;AAIH,OALD,CAKE,OAAOU,KAAP,EAAc;AACZ,cAAMtB,oBAAoB,CAACsB,KAAK,CAACC,OAAP,CAA1B;AACH;;AAED,UAAIH,CAAC,CAACI,IAAF,CAAOC,MAAP,KAAkBV,MAAM,CAACW,EAA7B,EAAiC;AAC7B,cAAMC,KAAK,GACPP,CAAC,CAACI,IAAF,CAAOC,MAAP,KAAkBV,MAAM,CAACa,YAAzB,GAAwC,MAAxC,GAAiD,OADrD;AAEApB,QAAAA,GAAG,CAACqB,GAAJ,CAAQF,KAAR,EAAgB,IAAGP,CAAC,CAACI,IAAF,CAAOC,MAAO,IAAGL,CAAC,CAACI,IAAF,CAAOM,aAAc,EAAzD,EAA4D;AACxDN,UAAAA,IAAI,EAAEJ,CAAC,CAACI;AADgD,SAA5D;AAGH;;AAED,aAAOJ,CAAC,CAACI,IAAT;AACH,KApBD;;AAsBA,UAAMO,OAAO,GAAG9B,aAAa,CAAC+B,MAAd,CAAqB,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrDD,MAAAA,MAAM,CAACC,MAAM,GAAG,GAAV,CAAN,GAAuBhB,UAAU,CAACgB,MAAD,CAAjC;AACA,aAAOD,MAAP;AACH,KAHe,EAGb,EAHa,CAAhB;AAKAzB,IAAAA,GAAG,CAAC2B,eAAJ,CAAoBzB,IAApB,EAA0BqB,OAA1B;AACH;AA/DY,CAAjB","sourcesContent":["const {\n    Feature,\n    Helpers: { requireConfig },\n} = require('@genx/app');\nconst { ExternalServiceError } = require('@genx/error');\n\n/**\n * Make google maps client as a @genx/app feature\n * @see {@link https://googlemaps.github.io/google-maps-services-js/classes/client.html|Google Maps JS API}\n * @module Feature_GoogleMaps\n */\n\nconst allApiMethods = [\n    'clearExperienceId',\n    'clearExperienceIdHeader',\n    'directions',\n    'distancematrix',\n    'elevation',\n    'findPlaceFromText',\n    'geocode',\n    'geolocate',\n    'getExperienceId',\n    'nearestRoads',\n    'placeAutocomplete',\n    'placeDetails',\n    'placePhoto',\n    'placeQueryAutocomplete',\n    'placesNearby',\n    'reverseGeocode',\n    'setExperienceId',\n    'snapToRoads',\n    'textSearch',\n    'timezone',\n];\n\nmodule.exports = {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.SERVICE,\n\n    /**\n     * This feature can be grouped by serviceGroup\n     * @member {boolean}\n     */\n    groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} options - Options for the feature, from app config\n     * @property {object} [options.clientOptions] - The client options.\n     * @property {AxiosInstance} [options.clientOptions.axiosInstance] - AxiosInstance to be used by client. Provide one of axiosInstance or config.\n     * @property {object} [options.clientOptions.config] - Config used to create AxiosInstance. Provide one of axiosInstance or config.\n     * @property {array} [options.clientOptions.experienceId]\n     * @param {string} options.apiKey - API key\n     * @param {object} [options.apiDefaultArgs] - Default arguments for every API call\n     * @param {string} name - Service name assigned by the service container\n     * @returns {Promise.<*>}\n     */\n    load_: async function (app, options, name) {\n        requireConfig(app, options, ['apiKey'], name);\n\n        const { clientOptions = {}, apiKey, apiDefaultArgs } = options;\n        const { Client, Status } = app.tryRequire(\n            '@googlemaps/google-maps-services-js'\n        );\n\n        const client = new Client(clientOptions);\n        const apiWrapper = (name) => async (params) => {\n            let r;\n            try {\n                r = await client[name]({\n                    ...apiDefaultArgs,\n                    params: { ...params, key: apiKey },\n                });\n            } catch (error) {\n                throw ExternalServiceError(error.message);\n            }\n\n            if (r.data.status !== Status.OK) {\n                const level =\n                    r.data.status === Status.ZERO_RESULTS ? 'warn' : 'error';\n                app.log(level, `[${r.data.status}]${r.data.error_message}`, {\n                    data: r.data,\n                });\n            }\n\n            return r.data;\n        };\n\n        const service = allApiMethods.reduce((result, method) => {\n            result[method + '_'] = apiWrapper(method);\n            return result;\n        }, {});\n\n        app.registerService(name, service);\n    },\n};\n"],"file":"index.js"}